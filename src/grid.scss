@import "functions";
@import "mixin";
@import "variables";

.grid {
  display: grid;
}

$utilities: (
        "grid-template-columns" : (
                property: grid-template-columns,
                class: grid-cols,
                value: map-merge(('none': none),
                        generate-grid-map(map-get($grid-columns, "columns"), "grid-template-columns")),
                responsive: map-get($grid-columns, 'responsive')
        ),
        "grid-column" : (
                property: grid-column,
                class: col-span,
                value: map-merge(('auto': auto), generate-grid-map(map-get($grid-columns, "columns"), "grid-column")),
                responsive: map-get($grid-columns, 'responsive')
        ),
        "grid-column-start" : (
                property: grid-column-start,
                class: col-start,
                value: map-merge(('auto': auto), generate-grid-map(map-get($grid-columns, "columns"))),
                responsive: map-get($grid-columns, 'responsive')
        ),
        "grid-column-end" : (
                property: grid-column-end,
                class: col-end,
                value: map-merge(('auto': auto), generate-grid-map(map-get($grid-columns, "columns"))),
                responsive: map-get($grid-columns, 'responsive')
        ),
        "grid-template-rows" : (
                property: grid-template-rows,
                class: grid-rows,
                value: map-merge(('none': none), generate-grid-map(map-get($grid-rows, "rows"), 'grid-template-rows')),
                responsive: map-get($grid-rows, 'responsive')
        ),
        "grid-row" : (
                property: grid-row,
                class: row-span,
                value: map-merge(('auto': auto), generate-grid-map(map-get($grid-rows, "rows"), "grid-row")),
                responsive: map-get($grid-rows, 'responsive')
        ),
        "grid-row-start" : (
                property: grid-row-start,
                class: row-start,
                value: map-merge(('auto': auto), generate-grid-map(map-get($grid-rows, "rows"))),
                responsive: map-get($grid-rows, 'responsive')
        ),
        "grid-row-end" : (
                property: grid-row-end,
                class: row-end,
                value: map-merge(('auto': auto), generate-grid-map(map-get($grid-rows, "rows"))),
                responsive: map-get($grid-rows, 'responsive')
        ),
        "gap" : (
                property: grid-gap gap,
                class: gap,
                value: $gaps,
                responsive: false
        ),
        "row-gap" : (
                property: grid-row-gap row-gap,
                class: gap-y,
                value: $gaps,
                responsive: false
        ),
        "column-gap" : (
                property: grid-column-gap column-gap,
                class: gap-x,
                value: $gaps,
                responsive: false
        ),
);

@each $utility_property, $utility_value in $utilities {
  //@debug '$utility_property #{$utility_property}';
  //@debug '$utility_value #{$utility_value}';

  $values: map-get($utility_value, value);
  //@debug '$values #{$values}';
  $class: map-get($utility_value, class);
  $css_properties: map-get($utility_value, property);
  $responsive: map-get($utility_value, responsive);

  @if type-of($css_properties) == "string" {
    $css_properties: append((), map-get($utility_value, property));
  }


  @if ($responsive) {
    @each $breakpoint in map-keys($breakpoints) {
      @include media-breakpoint($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $breakpoints);
        @include create-class($values, $css_properties, $class, $infix);
      }
    }
  } @else {
    @include create-class($values, $css_properties, $class);
  }

}

